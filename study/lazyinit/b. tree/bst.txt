"""

# 설명 (알고리즘)

- BST 는 아래 조건을 모두 만족하는 Tree 에서 사용할 수 있다.

1. 각 노드에 값이 있다.
2. 각 노드의 키값은 모두 달라야 한다.
3. 값들은 전순서가 있다.
4. 노드의 왼쪽 서브트리에는 그 노드의 값보다 작은 값들을 지닌 노드들로 이루어져 있다.
5. 노드의 오른쪽 서브트리에는 그 노드의 값보다 큰 값들을 지닌 노드들로 이루어져 있다.
6. 좌우 하위 트리는 각각이 다시 이진 탐색 트리여야 한다.
7. 중복된 노드가 없어야 한다.

- 검색

1. 이진탐색트리에서 키 x를 가진 노드를 검색하고자 할때, 트리에 해당 노드가 존재하면 해당 노드를 리턴하고, 존재하지 않으면 NULL을 리턴한다.
2. 검색하고자 하는 값을 루트노드와 먼저 비교하고, 일치할 경우 루트노드를 리턴한다.
3. 불일치하고 검색하고자 하는 값이 루트노드보다 작을 경우 왼쪽 서브트리에서 재귀적으로 검색한다.
4. 불일치하고 검색하고자 하는 값이 루트노드보다 클 경우 오른쪽 서브트리에서 재귀적으로 검색한다.

- 삽입

1. 삽입을 하기 전, 검색을 수행한다.
2. 트리를 검색한 후 키와 일치하는 노드가 없으면 마지막 노드에서 키와 노드의 크기를 비교하여서 왼쪽이나 오른쪽에 새로운 노드를 삽입한다.

- 삭제

  삭제하려는 노드의 자식 수에 따라다르다.
1. 자식노드가 없는 노드(리프 노드) 삭제 : 해당 노드를 단순히 삭제한다.
2. 자식노드가 1개인 노드 삭제 : 해당 노드를 삭제하고 그 위치에 해당 노드의 자식노드를 대입한다.
3. 자식노드가 2개인 노드 삭제 : 삭제하고자 하는 노드의 값을 해당 노드의 왼쪽 서브트리에서 가장 큰값으로 대체하거나, 오른쪽 서브트리에서 가장 작은 값으로 대체한 뒤, 해당 노드(왼쪽서브트리에서 가장 큰 값을 가지는 노드 또는 오른쪽 서브트리에서 가장 작은 값을 가지는 노드)를 삭제한다.

- 탐색 방법

1. in-order 탐색 : 왼쪽 자식노드, 내 노드, 오른쪽 자식노드 순서로 탐색
 - 오름차순 형태로 탐색 됨
 - symmetric(대칭) 순회라고도 함

2. pre-order 탐색 : 내 노드, 왼쪽 자식노드, 오른쪽 자식노드 순서로 탐색
 - DFS 탐색과 동일
 - 이진 탐색 트리를 완전히 복사해서 만들 때 새로운 트리에 값을 집어넣는 동안에 흔히 사용한다.

3. post-order 탐색 : 왼쪽 자식노드, 오른쪽 자식노드, 내 노드 순서로 탐색
 - 연산에 필요한 operand 를 모두 탐색 후, 탐색된 operand 를 operator 에 맞게 연산을 할 때 사용한다/
 - ex) {4 + 3} 을 post-order로 탐색하면, {4 3 +} 가 되는데 operand {4, 3} -> + 하는 방식으로 검색할 수 있다.

3. level-order 탐색 : 내노드, 내노드로부터 깊이 1인 노드, 2인 노드 ... N인 노드 순서로 탐색
 - BFS 탐색과 동일

# 복잡도

1. 시간복잡도
  - 검색 & 삽입 & 삭제 모두 동일
  - best : O(log2n)
  - avg : O(log2n)
  - worst : O(n) -> 편향 이진트리일 경우

# 최적의 이진트리
 - 조건 : 각 데이터들이 검색될 확률을 가지고 있어야 한다. & 데이터의 삭제 & 삽입이 검색보다 상대적으로 적어야 한다
 - 방법 :
   1. 데이터들이 나타낼 수 있는 모든 트리를 표현한다.
   2. 각 트리모델마다 모든 데이터의 sum(확률*비용) 을 계산하여 그 값이 최소인 모델을 선택

"""